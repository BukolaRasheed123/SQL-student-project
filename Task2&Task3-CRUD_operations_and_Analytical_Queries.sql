-----------------------------------Task 2 CRUD Operations-----------------------------

--1 Add a new customer to the database
INSERT INTO Customers (name, email, phone_number, address)
    VALUES ('Alex Johnson', 'alex.johnson@gmail.com', '(+234)812-345-6789', '123 New Street, Cityville, Osun');

--2 Update the stock quantity of a product after a purchase.
UPDATE Products
    SET stock_quantity = stock_quantity - 5 
	WHERE product_id = 101;


--3 Delete an order from the database. 
DELETE FROM Orders
    WHERE order_id = 5023; 

--4 Retrieve all orders made by a specific customer.
SELECT * FROM Orders
    WHERE customer_id = 2; 




------------------------------------- Task 3 Analytical Queries -------------------------------

-- 1 Revenue Analysis:
-- Calculate the total revenue generated by the e-commerce platform
SELECT SUM(price * quantity) AS total_revenue
FROM Order_Items;

-- Find the revenue generated per product
SELECT 
    p.product_name,
    SUM(oi.price * oi.quantity) AS product_revenue
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
GROUP BY p.product_name
ORDER BY product_revenue DESC;

-- 2 Customer Insights:
-- List the top 5 customers by total spending
SELECT 
    c.name AS customer_name,
    SUM(o.total_amount) AS total_spending
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
GROUP BY c.name
ORDER BY total_spending DESC
LIMIT 5;

-- Identify customers who havenâ€™t made any purchases
SELECT c.customer_id, c.name AS customer_name
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.customer_id IS NULL;

-- 3 Product Trends:
-- Find the top 3 best-selling products
SELECT 
    p.product_name,
    SUM(oi.quantity) AS total_sold
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_sold DESC
LIMIT 3;

-- Identify products that are out of stock
SELECT product_name
FROM Products
WHERE stock_quantity = 0;

-- 4 Order Details:
-- Retrieve all items in a specific order, including product names, quantities, and prices
SELECT 
    oi.order_item_id,
    p.product_name,
    oi.quantity,
    oi.price
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
WHERE oi.order_id = 5019;  

-- Calculate the total amount of an order
SELECT 
    oi.order_id,
    SUM(oi.price * oi.quantity) AS order_total
FROM Order_Items oi
WHERE oi.order_id = 5007 
GROUP BY oi.order_id;

-- 5 Monthly Trends:
-- Calculate the number of orders and total revenue for each month
SELECT 
    TO_CHAR(o.order_date, 'Month') AS order_month,
    COUNT(o.order_id) AS number_of_orders,
    SUM(oi.price * oi.quantity) AS total_revenue
FROM Orders o
JOIN Order_Items oi ON o.order_id = oi.order_id
GROUP BY TO_CHAR(o.order_date, 'Month')
ORDER BY TO_CHAR(o.order_date, 'Month');




